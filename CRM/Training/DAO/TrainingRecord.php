<?php

/**
 * @package CRM
 * @copyright CiviCRM LLC https://civicrm.org/licensing
 *
 * Generated from com.graydigitalgroup.training/xml/schema/CRM/Training/TrainingRecord.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:2abcaae4a87cc95712f2e948100ccd13)
 */
use CRM_Training_ExtensionUtil as E;

/**
 * Database access object for the TrainingRecord entity.
 */
class CRM_Training_DAO_TrainingRecord extends CRM_Core_DAO {
  const EXT = E::LONG_NAME;
  const TABLE_ADDED = '';

  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  public static $_tableName = 'training_record';

  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var bool
   */
  public static $_log = TRUE;

  /**
   * Unique Record ID
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $id;

  /**
   * FK to training_type.id
   *
   * @var int|string
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $type_id;

  /**
   * FK to Contact
   *
   * @var int|string
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $contact_id;

  /**
   * Identifier for the training item
   *
   * @var string|null
   *   (SQL type: varchar(255))
   *   Note that values will be retrieved from the database as a string.
   */
  public $label;

  /**
   * Full description of record. Text and html allowed.
   *
   * @var string|null
   *   (SQL type: text)
   *   Note that values will be retrieved from the database as a string.
   */
  public $description;

  /**
   * Whether or not credits were awarded for this record. If so, you can specify the number of credits below.
   *
   * @var bool|string
   *   (SQL type: tinyint)
   *   Note that values will be retrieved from the database as a string.
   */
  public $credits_awarded;

  /**
   * The number of credits awarded for the record.
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $credits;

  /**
   * Date the record was made.
   *
   * @var string|null
   *   (SQL type: date)
   *   Note that values will be retrieved from the database as a string.
   */
  public $entry_date;

  /**
   * Class constructor.
   */
  public function __construct() {
    $this->__table = 'training_record';
    parent::__construct();
  }

  /**
   * Returns localized title of this entity.
   *
   * @param bool $plural
   *   Whether to return the plural version of the title.
   */
  public static function getEntityTitle($plural = FALSE) {
    return $plural ? E::ts('Training Records') : E::ts('Training Record');
  }

  /**
   * Returns foreign keys and entity references.
   *
   * @return array
   *   [CRM_Core_Reference_Interface]
   */
  public static function getReferenceColumns() {
    if (!isset(Civi::$statics[__CLASS__]['links'])) {
      Civi::$statics[__CLASS__]['links'] = static::createReferenceColumns(__CLASS__);
      Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Basic(self::getTableName(), 'type_id', 'training_type', 'id');
      Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Basic(self::getTableName(), 'contact_id', 'civicrm_contact', 'id');
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'links_callback', Civi::$statics[__CLASS__]['links']);
    }
    return Civi::$statics[__CLASS__]['links'];
  }

  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  public static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = [
        'id' => [
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => E::ts('Unique Record ID'),
          'required' => TRUE,
          'where' => 'training_record.id',
          'table_name' => 'training_record',
          'entity' => 'TrainingRecord',
          'bao' => 'CRM_Training_DAO_TrainingRecord',
          'localizable' => 0,
          'html' => [
            'type' => 'Number',
          ],
          'readonly' => TRUE,
          'add' => NULL,
        ],
        'type_id' => [
          'name' => 'type_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Training Type'),
          'description' => E::ts('FK to training_type.id'),
          'required' => TRUE,
          'import' => TRUE,
          'where' => 'training_record.type_id',
          'export' => FALSE,
          'table_name' => 'training_record',
          'entity' => 'TrainingRecord',
          'bao' => 'CRM_Training_DAO_TrainingRecord',
          'localizable' => 0,
          'FKClassName' => 'CRM_Training_DAO_TrainingType',
          'html' => [
            'type' => 'Select',
            'label' => E::ts("Training Type"),
          ],
          'add' => NULL,
        ],
        'contact_id' => [
          'name' => 'contact_id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => E::ts('FK to Contact'),
          'required' => TRUE,
          'where' => 'training_record.contact_id',
          'export' => TRUE,
          'table_name' => 'training_record',
          'entity' => 'TrainingRecord',
          'bao' => 'CRM_Training_DAO_TrainingRecord',
          'localizable' => 0,
          'FKClassName' => 'CRM_Contact_DAO_Contact',
          'html' => [
            'type' => 'EntityRef',
            'label' => E::ts("Contact"),
          ],
          'add' => NULL,
        ],
        'label' => [
          'name' => 'label',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Label'),
          'description' => E::ts('Identifier for the training item'),
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
          'import' => TRUE,
          'where' => 'training_record.label',
          'export' => TRUE,
          'table_name' => 'training_record',
          'entity' => 'TrainingRecord',
          'bao' => 'CRM_Training_DAO_TrainingRecord',
          'localizable' => 1,
          'html' => [
            'type' => 'Text',
          ],
          'add' => NULL,
        ],
        'description' => [
          'name' => 'description',
          'type' => CRM_Utils_Type::T_TEXT,
          'title' => E::ts('Description'),
          'description' => E::ts('Full description of record. Text and html allowed.'),
          'rows' => 8,
          'cols' => 60,
          'where' => 'training_record.description',
          'table_name' => 'training_record',
          'entity' => 'TrainingRecord',
          'bao' => 'CRM_Training_DAO_TrainingRecord',
          'localizable' => 1,
          'html' => [
            'type' => 'RichTextEditor',
          ],
          'add' => NULL,
        ],
        'credits_awarded' => [
          'name' => 'credits_awarded',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => E::ts('Are Credits Awarded'),
          'description' => E::ts('Whether or not credits were awarded for this record. If so, you can specify the number of credits below.'),
          'required' => TRUE,
          'where' => 'training_record.credits_awarded',
          'default' => '0',
          'table_name' => 'training_record',
          'entity' => 'TrainingRecord',
          'bao' => 'CRM_Training_DAO_TrainingRecord',
          'localizable' => 0,
          'html' => [
            'type' => 'CheckBox',
          ],
          'add' => NULL,
        ],
        'credits' => [
          'name' => 'credits',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Credits'),
          'description' => E::ts('The number of credits awarded for the record.'),
          'where' => 'training_record.credits',
          'default' => NULL,
          'table_name' => 'training_record',
          'entity' => 'TrainingRecord',
          'bao' => 'CRM_Training_DAO_TrainingRecord',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => NULL,
        ],
        'entry_date' => [
          'name' => 'entry_date',
          'type' => CRM_Utils_Type::T_DATE,
          'title' => E::ts('Entry Date'),
          'description' => E::ts('Date the record was made.'),
          'import' => TRUE,
          'where' => 'training_record.entry_date',
          'dataPattern' => '/\d{4}-?\d{2}-?\d{2}/',
          'export' => TRUE,
          'default' => NULL,
          'table_name' => 'training_record',
          'entity' => 'TrainingRecord',
          'bao' => 'CRM_Training_DAO_TrainingRecord',
          'localizable' => 0,
          'html' => [
            'type' => 'Select Date',
            'formatType' => 'activityDate',
          ],
          'add' => NULL,
        ],
      ];
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }

  /**
   * Return a mapping from field-name to the corresponding key (as used in fields()).
   *
   * @return array
   *   Array(string $name => string $uniqueName).
   */
  public static function &fieldKeys() {
    if (!isset(Civi::$statics[__CLASS__]['fieldKeys'])) {
      Civi::$statics[__CLASS__]['fieldKeys'] = array_flip(CRM_Utils_Array::collect('name', self::fields()));
    }
    return Civi::$statics[__CLASS__]['fieldKeys'];
  }

  /**
   * Returns the names of this table
   *
   * @return string
   */
  public static function getTableName() {
    return CRM_Core_DAO::getLocaleTableName(self::$_tableName);
  }

  /**
   * Returns if this table needs to be logged
   *
   * @return bool
   */
  public function getLog() {
    return self::$_log;
  }

  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &import($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, '_record', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &export($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, '_record', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of indices
   *
   * @param bool $localize
   *
   * @return array
   */
  public static function indices($localize = TRUE) {
    $indices = [
      'index_type_id' => [
        'name' => 'index_type_id',
        'field' => [
          0 => 'type_id',
        ],
        'localizable' => FALSE,
        'sig' => 'training_record::0::type_id',
      ],
    ];
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }

}
